import Foundation
import ReactiveCocoa

/// Extension for processing raw NSData generated by network access.
public extension RACSignal {
    
    private func convertToMoyaSignal() -> SignalProducer<MoyaResponse, NSError> {
        return toSignalProducer().flatMap(.Latest) { object -> SignalProducer<MoyaResponse, NSError> in
  
            guard let response = object as? MoyaResponse else {
                return SignalProducer(error: NSError(domain: RACSignalErrorDomain, code: RACSignalErrorNoMatchingCase, userInfo: nil))
            }
            
            return SignalProducer(value: response)
        }
    }
    
    /// Filters out responses that don't fall within the given range, generating errors when others are encountered.
    public func filterStatusCodes(range: ClosedInterval<Int>) -> RACSignal {
        return toRACSignal(convertToMoyaSignal().filterStatusCodes(range))
    }

    public func filterStatusCode(code: Int) -> RACSignal {
        return filterStatusCodes(code...code)
    }

    public func filterSuccessfulStatusCodes() -> RACSignal {
        return filterStatusCodes(200...299)
    }
    
    public func filterSuccessfulStatusAndRedirectCodes() -> RACSignal {
        return filterStatusCodes(200...399)
    }
    
    /// Maps data received from the signal into an Image. If the conversion fails, the signal errors.
    public func mapImage() -> RACSignal {
        return toRACSignal(convertToMoyaSignal().mapImage())
    }
    
    /// Maps data received from the signal into a JSON object. If the conversion fails, the signal errors.
    public func mapJSON() -> RACSignal {
        return toRACSignal(convertToMoyaSignal().mapJSON())
    }
    
    /// Maps data received from the signal into a String. If the conversion fails, the signal errors.
    public func mapString() -> RACSignal {
        return toRACSignal(convertToMoyaSignal().mapString().map { $0 as NSString })
    }
}
